#pragma once
#include <iostream>
#include <functional>
#include <vector>


#define PI 3.1415926
#define SQRT_TWO_PI 2.5066282746310005024
#define ONE_OVER_TWO_PI (0.15915494309644431437107064141535)


struct QuadratureCoefficients {
	const double weight;
	const double abscissa;
};

inline std::vector<QuadratureCoefficients>& getLegendre20 () {
	static std::vector<QuadratureCoefficients> legendre_20 = {
		{ 0.0176140071391521,	-0.9931285991850949 },
		{ 0.0406014298003869,	-0.9639719272779138 },
		{ 0.0626720483341091,	-0.9122344282513259 },
		{ 0.0832767415767048,	-0.8391169718222188 },
		{ 0.1019301198172404,	-0.7463319064601508 },
		{ 0.1181945319615184,	-0.6360536807265150 },
		{ 0.1316886384491766,	-0.5108670019508271 },
		{ 0.1420961093183820,	-0.3737060887154195 },
		{ 0.1491729864726037,	-0.2277858511416451 },
		{ 0.1527533871307258,	-0.0765265211334973 },
		{ 0.1527533871307258,	0.0765265211334973 },
		{ 0.1491729864726037,	0.2277858511416451 },
		{ 0.1420961093183820,	0.3737060887154195 },
		{ 0.1316886384491766,	0.5108670019508271 },
		{ 0.1181945319615184,	0.6360536807265150 },
		{ 0.1019301198172404,	0.7463319064601508 },
		{ 0.0832767415767048,	0.8391169718222188 },
		{ 0.0626720483341091,	0.9122344282513259 },
		{ 0.0406014298003869,	0.9639719272779138 },
		{ 0.0176140071391521,	0.9931285991850949 }
	};
	return legendre_20;
}

inline std::vector<QuadratureCoefficients>& getLegendre12() {
	static std::vector<QuadratureCoefficients> legendre_12 ={
	{ 	0.0471753363865118, -0.9815606342467192 },
	{ 	0.1069393259953184, -0.9041172563704749 },
	{ 	0.1600783285433462, -0.7699026741943047 },
	{ 	0.2031674267230659, -0.5873179542866175 },
	{ 	0.2334925365383548, -0.3678314989981802 },
	{   0.2491470458134028,  -0.1252334085114689 },
	{ 	0.2491470458134028,	0.1252334085114689 },
	{ 	0.2334925365383548,	0.3678314989981802 },
	{ 	0.2031674267230659,	0.5873179542866175 },
	{ 	0.1600783285433462,	0.7699026741943047 },
	{ 	0.1069393259953184,	0.9041172563704749 },
	{ 	0.0471753363865118,	0.9815606342467192 }
	};
	return legendre_12;
}


inline std::vector<QuadratureCoefficients>& getLegendre24() {
	static std::vector<QuadratureCoefficients> legendre_24 = {
{ 	0.0123412297999872, -0.9951872199970213 },
{ 	0.0285313886289337, -0.9747285559713095 },
{ 	0.0442774388174198, -0.9382745520027328 },
{ 	0.0592985849154368, -0.8864155270044011 },
{ 	0.0733464814110803, -0.8200019859739029 },
{ 	0.0861901615319533, -0.7401241915785544 },
{ 	0.0976186521041139, -0.6480936519369755 },
{ 	0.1074442701159656, -0.5454214713888396 },
{ 	0.1155056680537256, -0.4337935076260451 },
{ 	0.1216704729278034, -0.3150426796961634 },
{ 	0.1258374563468283, -0.1911188674736163 },
{ 0.1279381953467522 , - 0.0640568928626056 },
{ 	0.1279381953467522,	0.0640568928626056 },
{ 	0.1258374563468283,	0.1911188674736163 },
{ 	0.1216704729278034,	0.3150426796961634 },
{ 	0.1155056680537256,	0.4337935076260451 },
{ 	0.1074442701159656,	0.5454214713888396 },
{ 	0.0976186521041139,	0.6480936519369755 },
{ 	0.0861901615319533,	0.7401241915785544 },
{ 	0.0733464814110803,	0.8200019859739029 },
{ 	0.0592985849154368,	0.8864155270044011 },
{ 	0.0442774388174198,	0.9382745520027328 },
{ 	0.0285313886289337,	0.9747285559713095 },
{ 	0.0123412297999872,	0.9951872199970213 }
};
return legendre_24;
}





inline std::vector<QuadratureCoefficients>& getLaguerre20() {
	static std::vector<QuadratureCoefficients> laguerre_20 = {
		{ 0.0705398896919887533667,	0.168746801851113862149 },
		{ 0.372126818001611443794,	0.291254362006068281717 },
		{ 0.916582102483273564668,	0.26668610286700128855 },
		{ 1.707306531028343880688,	0.1660024532695068400315 },
		{ 2.749199255309432129645,	0.0748260646687923705401 },
		{ 4.04892531385088692237,	0.02496441730928322107282 },
		{ 5.6151749708616165141,	0.00620255084457223684745 },
		{ 7.459017453671063309769,	0.00114496238647690824204 },
		{ 9.59439286958109677247	,1.5574177302781197478E-4 },
		{ 12.03880254696431630962,	1.54014408652249156894E-5 },
		{ 14.81429344263073997851,	1.08648636651798235148E-6 },
		{ 17.94889552051937601737,	5.3301209095567147509E-8 },
		{ 21.47878824028501097574,	1.75798117905058200358E-9 },
		{ 25.45170279318690550352,	3.72550240251232087263E-11 },
		{ 29.93255463170061200671,	4.76752925157819052449E-13 },
		{ 35.01343424047900000628,	3.37284424336243841237E-15 },
		{ 40.83305705672857106203,	1.15501433950039883096E-17 },
		{ 47.61999404734650213994,	1.539522140582343553464E-20 },
		{ 55.81079575006389889075,	5.286442725569157828803E-24 },
		{ 66.52441652561575381864,	1.656456612499023295908E-28 },
	};
	return laguerre_20;
}

#define SQRT_TWO 1.414213566237

inline std::vector<QuadratureCoefficients>& getHermite20Positive() {
	static std::vector<QuadratureCoefficients> Hermite20Positive_ = {
		{ 0.2453407083009012499038/ SQRT_TWO,	0.46224366960061008965},
		{ 0.7374737285453943587056 / SQRT_TWO,	0.28667550536283412972},
	{ 1.234076215395323007886 / SQRT_TWO,	0.1090172060200233200138},
	{ 1.738537712116586206781 / SQRT_TWO,	0.0248105208874636108822},
	{ 2.254974002089275523082 / SQRT_TWO,	0.00324377334223786183218},
	{ 2.78880605842813048053 / SQRT_TWO,	2.283386360163539672571E-4},
	{ 3.347854567383216326915 / SQRT_TWO,	7.8025564785320636941E-6},
	{ 3.944764040115625210376 / SQRT_TWO,	1.086069370769281694E-7},
	{ 4.603682449550744273078 / SQRT_TWO,	4.39934099227318055363E-10},
	{ 5.387480890011232862017 / SQRT_TWO,	2.22939364553415129252E-13 }
	};
	return Hermite20Positive_;
}



inline std::vector<QuadratureCoefficients>& getLaguerre100() {
	static std::vector<QuadratureCoefficients> laguerre_100 = {

{ 0.01438614699541966946,	0.03639260588340135654 },
{ 0.075803612023357124643,	0.07967674621295139855 },
{ 0.18631410205718717371,	0.112115103342486944678 },
{ 0.34596918099142909081,	0.13035661297514618374 },
{ 0.5548109375809155096,	0.1340433397284623804 },
{ 0.81289128411566884504,	0.125407090780663749967 },
{ 1.12027383500754014857,	0.1083141120972602735538 },
{ 1.47703432992382706972,	0.087096638469959342035 },
{ 1.8832608263423947058,	0.065551009312310614325 },
{ 2.33905384964603417184,	0.046340133582644259874 },
{ 2.84452654275535906652	,0.030846308627681445601 },
{ 3.39980482744571194429	,0.0193678281139787891104 },
{ 4.005027581758652017465,	0.0114854423601796916174 },
{ 4.6603468355689084595,	0.00643895100161042959052 },
{ 5.365927985585117014884,	0.003414979989692662593 },
{ 6.121950030804019789061,	0.00171431974018220816191 },
{ 6.92860582937617305502,	8.148715915878378532852E-4 },
{ 7.78610237786251743434,	3.6685483659948815078E-4 },
{ 8.6946611139221679892,	1.56452074178106794719E-4 },
{ 9.65451824355508072781,	6.32108705288858076314E-5 },
//{ 10.66592509412167555054,	2.41957522651892926443E-5 },
//{ 11.72914849447222507162,	8.7743097637554872419E-6 },
//{ 12.84447118364103057157,	3.01426748600094751875E-6 },
//{ 14.01219224969427464896,	9.808335899345259768E-7 },
//{ 15.23262760046669784302,	3.02263874353225430798E-7 },
//{ 16.50611046808198959419,	8.820058395295938612E-8 },
//{ 17.83299194932638742984,	2.436425856200673367434E-8 },
//{ 19.2136415841360666849,	6.3697113739017570248E-9 },
//{ 20.64844797466834951965,	1.575600320459668008E-9 },
//{ 22.13781944765670440655,	3.6863292013461326689E-10 },
//{ 23.68218476300237610017,	8.15479892422461121192E-11 },
//{ 25.28199387183404153878,	1.70506255682606540773E-11 },
//{ 26.93771872757426494355,	3.3682141708667259378E-12 },
//{ 28.6498541538912921711,	6.283524955366657366E-13 },
//{ 30.4189187737909429196,	1.106498015983306170675E-13 },
//{ 32.2454560045206658423	,1.83835017545490138322E-14 },
//{ 34.13003512342151647129,	2.88011505723058573387E-15 },
//{ 36.0732524103799732262,	4.2526128973372414067E-16 },
	};
	return laguerre_100;
}


inline std::vector<QuadratureCoefficients>& getLegendre64 () {
	static std::vector<QuadratureCoefficients> legendre_64 = {
		{0.00178328072169640005836810381367740774294361472129822, -0.999305041735772170419238591421162709593772888183594}
		,{0.00414703326056250001774294844381074653938412666320801, -0.996340116771955330854382282268488779664039611816406}
		,{0.00650445796897840006894897513234354846645146608352661, -0.991013371476744286958648899599211290478706359863281}
		,{0.0088467598263639000977232029754304676316678524017334, -0.983336253884625977050859546579886227846145629882812}
		,{0.0111681394601311004266541715423954883590340614318848, -0.973326827789910975496923128957860171794891357421875}
		,{0.0134630478967185992361654811588778102304786443710327, -0.961008799652053768980408676725346595048904418945312}
		,{0.0157260304760247007771489791139174485579133033752441, -0.946411374858402765219977936794748529791831970214844}
		,{0.0179517157756973015636514645620991359464824199676514, -0.929569172131939569503344955592183396220207214355469}
		,{0.0201348231535301985806185598448792006820440292358398, -0.910522137078502824536485604767221957445144653320312}
		,{0.0222701738083832985470866816513080266304314136505127, -0.889315445995114139954296206269646063446998596191406}
		,{0.0243527025687109016649500858875398989766836166381836, -0.865999398154092769885892266756854951381683349609375}
		,{0.0263774697150547000890075111101396032609045505523682, -0.840629296252580315851332670717965811491012573242188}
		,{0.0283396726142595006825430914432217832654714584350586, -0.81326531512279753854954833514057099819183349609375}
		,{0.0302346570724024987786293650060542859137058258056641, -0.783972358943341385284497846441809087991714477539062}
		,{0.0320579283548515989177296603429567767307162284851074, -0.752819907260531939741099449747707694768905639648438}
		,{0.0338051618371415993347106621058628661558032035827637, -0.719881850171610881972128481720574200153350830078125}
		,{0.0354722132568823997345042187134822597727179527282715, -0.685236313054233270314341552875703200697898864746094}
		,{0.037055128540239998247152186650055227801203727722168, -0.648965471254657311206415215565357357263565063476562}
		,{0.0385501531786155982040042999869911000132560729980469, -0.611155355172393277563003266550367698073387145996094}
		,{0.0399537411327203009769881703050486976280808448791504, -0.571895646202634000410114367696223780512809753417969}
		,{0.0412625632426234997818248473322455538436770439147949, -0.531279464019894565041113310144282877445220947265625}
		,{0.0424735151236535976582153750769066391512751579284668, -0.489403145707053011115306162537308409810066223144531}
		,{0.0435837245293234989973463200385594973340630531311035, -0.446366017253464086866898696825955994427204132080078}
		,{0.044590558163756600917881911527729243971407413482666, -0.402270157963991625837962828882155008614063262939453}
		,{0.0454916279274181004077526324635982746258378028869629, -0.357220158337668125536623620064347051084041595458984}
		,{0.0462847965813144024416203592409146949648857116699219, -0.311322871990211025305939074314665049314498901367188}
		,{0.046968182816209999574930122889782069250941276550293, -0.264687162208767423621225134411361068487167358398438}
		,{0.0475401657148303014022161505636177025735378265380859, -0.217423643740007110913836640975205227732658386230469}
		,{0.0479993885964583033576502657524542883038520812988281, -0.169644420423992803304003018638468347489833831787109}
		,{0.048344762234803002887151279765021172352135181427002, -0.121462819296120599910082660244370345026254653930664}
		,{0.0485754674415034004564262204439728520810604095458984, -0.0729931217877990007325550436689809430390596389770508}
		,{0.0486909570091397028712698613617249066010117530822754, -0.024350292663424401296001775563127011992037296295166}
		,{0.0486909570091397028712698613617249066010117530822754, 0.024350292663424401296001775563127011992037296295166}
		,{0.0485754674415034004564262204439728520810604095458984, 0.0729931217877990007325550436689809430390596389770508}
		,{0.048344762234803002887151279765021172352135181427002, 0.121462819296120599910082660244370345026254653930664}
		,{0.0479993885964583033576502657524542883038520812988281, 0.169644420423992803304003018638468347489833831787109}
		,{0.0475401657148303014022161505636177025735378265380859, 0.217423643740007110913836640975205227732658386230469}
		,{0.046968182816209999574930122889782069250941276550293, 0.264687162208767423621225134411361068487167358398438}
		,{0.0462847965813144024416203592409146949648857116699219, 0.311322871990211025305939074314665049314498901367188}
		,{0.0454916279274181004077526324635982746258378028869629, 0.357220158337668125536623620064347051084041595458984}
		,{0.044590558163756600917881911527729243971407413482666, 0.402270157963991625837962828882155008614063262939453}
		,{0.0435837245293234989973463200385594973340630531311035, 0.446366017253464086866898696825955994427204132080078}
		,{0.0424735151236535976582153750769066391512751579284668, 0.489403145707053011115306162537308409810066223144531}
		,{0.0412625632426234997818248473322455538436770439147949, 0.531279464019894565041113310144282877445220947265625}
		,{0.0399537411327203009769881703050486976280808448791504, 0.571895646202634000410114367696223780512809753417969}
		,{0.0385501531786155982040042999869911000132560729980469, 0.611155355172393277563003266550367698073387145996094}
		,{0.037055128540239998247152186650055227801203727722168, 0.648965471254657311206415215565357357263565063476562}
		,{0.0354722132568823997345042187134822597727179527282715, 0.685236313054233270314341552875703200697898864746094}
		,{0.0338051618371415993347106621058628661558032035827637, 0.719881850171610881972128481720574200153350830078125}
		,{0.0320579283548515989177296603429567767307162284851074, 0.752819907260531939741099449747707694768905639648438}
		,{0.0302346570724024987786293650060542859137058258056641, 0.783972358943341385284497846441809087991714477539062}
		,{0.0283396726142595006825430914432217832654714584350586, 0.81326531512279753854954833514057099819183349609375}
		,{0.0263774697150547000890075111101396032609045505523682, 0.840629296252580315851332670717965811491012573242188}
		,{0.0243527025687109016649500858875398989766836166381836, 0.865999398154092769885892266756854951381683349609375}
		,{0.0222701738083832985470866816513080266304314136505127, 0.889315445995114139954296206269646063446998596191406}
		,{0.0201348231535301985806185598448792006820440292358398, 0.910522137078502824536485604767221957445144653320312}
		,{0.0179517157756973015636514645620991359464824199676514, 0.929569172131939569503344955592183396220207214355469}
		,{0.0157260304760247007771489791139174485579133033752441, 0.946411374858402765219977936794748529791831970214844}
		,{0.0134630478967185992361654811588778102304786443710327, 0.961008799652053768980408676725346595048904418945312}
		,{0.0111681394601311004266541715423954883590340614318848, 0.973326827789910975496923128957860171794891357421875}
		,{0.0088467598263639000977232029754304676316678524017334, 0.983336253884625977050859546579886227846145629882812}
		,{0.00650445796897840006894897513234354846645146608352661, 0.991013371476744286958648899599211290478706359863281}
		,{0.00414703326056250001774294844381074653938412666320801, 0.996340116771955330854382282268488779664039611816406}
		,{0.00178328072169640005836810381367740774294361472129822, 0.999305041735772170419238591421162709593772888183594}
	};
	return legendre_64;
};

class LegendrePoints {
typedef std::function<std::vector<QuadratureCoefficients>&()> Func;
public: 
	LegendrePoints (const Func& func_) : func(func_) {}
	std::vector<QuadratureCoefficients>& operator () () { return func(); }
private:
	Func func;
};